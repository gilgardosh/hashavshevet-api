openapi: 3.0.0
info:
  version: 1.0.0
  title: "WizCloud API specification"
  description: "An API that allows interacting with Hashavshevet accounts"
  # termsOfService: "" #enter URL
  # contact: #enter contact info
  #   name: ""
  #   url: ""
  #   email: ""
  # license: #if needed
  #   name: ""
  #   url: ""
servers:
  - url: "https://lb1.wizcloud.co.il"
    description: "main database server"
paths:
  "/createSession/{wizKey}/{company}":
    get:
      summary: "Authentication endpoint. Returns a Token"
      tags:
        - "Auth"
      operationId: "getAuthToken"
      parameters:
        - $ref: "#/components/parameters/wizKey"
        - $ref: "#/components/parameters/company"
      responses:
        "200":
          description: "Successful response"
          content:
            text/plain:
              schema:
                type: string
                example: "5fw9a9d4jf69c4b4e1ccf486e176d26f"
          links:
            getWizAuthToken:
              description: ""
              operationId: "getToken"
              parameters:
                wuzAuthToken: $response.body
        "400":
          description: "illegal gmail"
          content:
            text/plain:
              schema:
                type: string
  "/CompanyListToTokenApi/TokenCompanies":
    post:
      summary: "Get Companies List"
      tags:
        - "companies"
        - "Get"
      security:
        - wizAuth: []
      operationId: "CompaniesForToken"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        #TODO map possible responses
        "200":
          description: "Repdata: companies list"
          content:
            application/json:
              schema:
                type: object
                example: "{'repdata':[{'Company_File_Name':'wizdb493n4','Company_Name':'חברה של עדנה ','Comp_Vatnum':'999999999'}]}"
  "/api/napi":
    post:
      summary: "Get User Details"
      tags:
        - "user"
      security:
        - wizAuth: []
      operationId: "getUserData"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        #TODO map possible responses
        "304":
          description: "User Data"
          content:
            application/json:
              schema:
                type: object
                example: "{'session':{'cid':'wizdb493n4','user':'gilgardosh@gmail.com','user_id':32,'company_id':4,'branch':1,'use_name':'גיל גרדוש - משתמש נוסף לאורי גולדשטיין ','wizcomp_no':'493','company_name':'חברה של עדנה '},'data':[]}"
  "/jtransApi/tmpBatch":
    post:
      summary: "Import transactions, check errors and input batch"
      description: "Imports the transactions to a new or already existing temporary batch. You may check for errors or input the batch into the permanent storage (if no errors were found)."
      tags:
        - "Batch"
        - "Import"
      security:
        - wizAuth: []
      operationId: "tmpJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/tmpJurnalBatchBody"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
  "/jtransApi/chkBatch":
    post:
      summary: "Checks if there are errors in the batch"
      tags:
        - "Batch"
        - "Check"
      security:
        - wizAuth: []
      operationId: "chkJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - batchNo
              properties:
                batchNo:
                  allOf:
                    - $ref: "#/components/schemas/batchNo"
                    - description: "check the batch having this number"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
  "/jtransApi/newBatch":
    post:
      summary: "Opens a new batch and return the number"
      tags:
        - "Batch"
        - "New"
      security:
        - wizAuth: []
      operationId: "newJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
  "/jtransApi/issueBatch":
    post:
      summary: "Checks and inputs the temporary batch into the permanent storage."
      tags:
        - "Batch"
        - "Issue"
      security:
        - wizAuth: []
      operationId: "issueJurnalBatch"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - batchNo
              properties:
                batchNo:
                  allOf:
                    - $ref: "#/components/schemas/batchNo"
                    - description: "Input the batch having this number"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
                
  "/IndexApi/importIndex":
    post:
      summary: "Imports or updates records to the selected index"
      tags:
        - "Index"
        - "Import"
      security:
        - wizAuth: []
      operationId: "importIndexRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              $ref: "#/components/schemas/importIndexRecordshBody"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
                
  "/invApi/createDoc":
    post:
      summary: "Imports and updates temporary documents"
      description: "Imports and updates new or already existing temporary documents. You may check for errors or issue and input the documents into the permanent storage (if no errors were found)."
      tags:
        - "Document"
        - "Import"
      security:
        - wizAuth: []
      operationId: "createDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              $ref: "#/components/schemas/createDocumentBody"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""

  "/invApi/issueDocument":
    post:
      summary: "Checks if there are errors in the batch"
      description: "Check issue and input the document to the permanent storage."
      tags:
        - "Document"
        - "Issue"
      security:
        - wizAuth: []
      operationId: "issueDoc"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""

  "/invApi/delDocument":
    post:
      summary: "Delete document from tables"
      tags:
        - "Document"
        - "Delete"
      security:
        - wizAuth: []
      operationId: "delDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""

  "/invApi/getDoc":
    post:
      summary: "Show document data"
      tags:
        - "Document"
        - "Get"
      security:
        - wizAuth: []
      operationId: "showDocument"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - stockID
              properties:
                stockID:
                  $ref: "#/components/schemas/stockID"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
                
  "/BankPagesApi/importBankPage":
    post:
      summary: "Import  or update records to chosen index"
      tags:
        - "BankPages"
        - "Import"
      security:
        - wizAuth: []
      operationId: "importBankPageRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              type: object
              required:
                - rows
              properties:
                rows:
                  type: object
                  #TODO define the object and create schema
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""
  
  "/ExportDataApi/exportData":
    post:
      summary: "Export data according to the selected report"
      tags:
        - "Export"
      security:
        - wizAuth: []
      operationId: "exportDataRecords"
      parameters:
        - in: header
          name: "Authorization"
          schema:
            type: string
            default: "Bearer "
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            #TODO check if all parameters are required, and api validation
            schema:
              $ref: "#/components/schemas/exportDataRecordsBody"
      responses:
        #TODO map possible responses
        "200":
          description: ""
          content:
            "*/*":
              schema:
                type: object
                example: ""

components:
  parameters:
    wizKey:
      name: "wizKey"
      in: path
      description: "The user ID. User token issued by the main administrator (the administrator that opens the company library)."
      required: true
      schema:
        type: string
    company:
      name: "company"
      in: path
      description: "company's database name. To reveal your database name, move the mouse cursor to the company description in your company list in the UI"
      required: true
      schema:
        type: string

  schemas:
    AccountKey:
      type: string
      description: "The customer or supplier account key"
      maximum: 15
      example: "40001"

    AccountName:
      type: string
      description: "name acc 111"
      maximum: 50
      example: "222"

    Address:
      type: string
      description: "Address"
      maximum: 50 #in StockData can be 100

    Agent:
      type: integer
      format: int32
      description: "Salesperson"
      example: "1"
    
    AssignKey:
      type: string
      maximum: 15
      description: "Central account key (existing account)"
      example: "777"
    
    AverageSupplyPeriod:
      type: number
      format: float
      description: "Average supply time"
    
    AvgLatePay:
      type: integer
      format: int32
      description: "Average delay of payments"

    BalanceCode:
      type: integer
      format: int32
      description: "Code for the balance and profit and loss report"

    BankAccount:
      type: string
      maximum: 20
      description: "Bank account #"

    BankCode:
      type: string
      maximum: 3
      description: "Bank code"

    BarCode:
      type: string
      maximum: 20
      description: "Barcode"

    batchNo:
      type: integer
      format: int32
      minimum: 1
      maximum: 2147483647
      description: "Batch number"
      example: "555"

    BranchCode:
      type: string
      maximum: 5
      description: "Bank branch code"

    City:
      type: string
      maximum: 20 #in StockData could be 50
      description: "City"

    CommitionPrc:
      type: number
      format: float
      description: "% commission"

    CostCode:
      type: integer
      format: int32
      description: "Existing cost center code"
      example: "22"

    CostOfShortage:
      type: number
      format: float
      description: "Cost of shortage"

    Country:
      type: string
      maximum: 20
      description: "Country"


    CreditTermsCode:
      type: integer
      format: int32
      description: "Split payment code"

    CredName:
      type: string
      maximum: 50
      description: "Name of the main credit account"
      example: "222 name"

    Currency:
      type: string
      maximum: 5
      description: "List price currency"

    CurrencyCode:
      type: string
      maximum: 5
      description: "List price currency"
      example: "$"

    CustomerNote:
      type: string
      maximum: 250
      description: "Message for the customer"

    DatF3:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Additional date"
      example: "mm/dd/yyyy"

    DebitCredit:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Debit=1, Credit=0"
      example: "1"

    DebName:
      type: string
      maximum: 50
      description: "Name of the main debit account"
      example: "111 name"

    DeductFile:
      type: string
      maximum: 20
      description: "Income file number"

    DeductionPrc:
      type: number
      format: float
      description: "% withholding tax"
      example: "10.5"

    DeductionValid:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Validity date of the % withholding tax"
      example: "28/02/2019"

    DefaultWarehouse:
      type: integer
      format: int32
      description: "Warehouse"

    DemandPerDay:
      type: number
      format: float
      description: "Average demand per day"

    DemandPerMonth:
      type: number
      format: float
      description: "Average demand per month"

    Description:
      type: string
      maximum: 250
      description: "Details"

    Det2:
      type: string
      maximum: 50
      description: "Additional remarks"

    Details:
      type: string
      maximum: 50 #in StockData could be 250
      description: "Details, Remarks"
      example: "my details 11"

    DifferAcc:
      type: string
      maximum: 15
      description: "Account key for small differences (existing account)"

    DiscountCode:
      type: integer
      format: int32
      description: "Discount code"

    DiscountPrc:
      type: number
      format: float #make sure Items_Data accepts not only INT
      description: "% of sale promotion or general discount "
      example: "10"

    DocCurr:
      type: string
      maximum: 5
      description: "Default value for foreign currency"

    DocNumber:
      type: integer
      format: int32
      description: "Document number. When the document numeration is unchangeable, the number is determined when the document is issued."
      example: "1"

    DocumentID:
      type: integer
      format: int32
      description: "Document type (according to the DocumentDef table)"
      example: "1"

    DueDate:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Due date"
      example: "30/01/2018"

    DutyPrc:
      type: number
      format: float
      description: "% customs"

    Email:
      type: string
      maximum: 50
      description: "E-Mail address "

    Fax:
      type: string
      maximum: 30
      description: "Fax"

    Filter:
      type: string
      maximum: 5  #in Items Data could be 10
      description: "Filtering"

    FixedOrderCost:
      type: number
      format: float
      description: "Fix cost of order"

    ForignName:
      type: string
      maximum: 100
      description: "Item name for export documents"

    FullName:
      type: string
      maximum: 50
      description: "Full Name"
      example: "8888 name new"

    ImpTaxPrc:
      type: number
      format: float
      description: "% sales tax - import"

    ItemKey:
      type: string
      maximum: 20
      description: "Item key"
      example: "33"

    ItemName:
      type: string
      maximum: 100
      description: "Item name"
      example: "name item 33"

    LastPurchDate:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Last purchasing price date"

    LineNoForSorting:
      type: integer
      format: int32
      description: "Line ID"

    Localization:
      type: string
      maximum: 50
      description: "Localization (in the storehouse)"

    MainAccount:
      type: integer
      format: int32
      description: "Code of the main account"

    Masav:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Transfer to MASAV"

    MatchCurr:
      type: string 
      maximum: 5
      description: "Currency for reconciliation (when the price is in foreign currency) "

    MaxCredit:
      type: number
      format: float
      description: "Credit limit"

    MaxCreditCurrency:
      type: string
      maximum: 5
      description: "Credit currency"

    MaxObligo:
      type: number
      format: float
      description: "Credit risk limit"

    MaxObligoCurrency:
      type: string
      maximum: 5
      description: "Credit risk currency"

    MaxStoragePeriod:
      type: number
      format: float
      description: "Maximum storage period"

    Osek874:
      type: string
      maximum: 9
      description: "VAT registration number"
      example: "123456789"

    Phone:
      type: string
      maximum: 30
      description: "Phone"

    Price:
      type: number
      format: float
      description: "Price"
      example: "1050"

    PurchAcc:
      type: string
      maximum: 15
      description: "Expense account (existing account key)"

    PurchaseUnit:
      type: string
      maximum: 5
      description: "Unit measure for purchase"

    PurchCurrency:
      type: string
      maximum: 5
      description: "Purchasing price currency"

    PurchPrice:
      type: integer
      format: float
      description: "Last purchasing price"

    Quant:  #merge with Quantity
      type: number
      format: float
      description: "Quantity"

    Quantity:
      type: number
      format: float
      description: "Quantity"
      example: "5"

    Rate:
      type: number
      format: float
      description: "Currency rate"
      example: "3.7"

    Ref2:
      type: integer
      format: int32
      description: "Reference-2"

    Ref3:
      type: integer
      format: int32
      description: "Reference-3"

    Reference:
      type: integer
      format: int32
      description: "Reference"
      example: "125"

    Remarks:
      type: string
      maximum: 250
      description: "Remarks"

    ReorderQuant:
      type: number
      format: float
      description: "Point of order"

    SalesAcc:
      type: string
      maximum: 15
      description: "Sales account (existing account key)"

    SalesUnit:
      type: string
      maximum: 5
      description: "Unit measure for sales"

    SortGroup:
      type: integer
      format: int32
      description: "Sorting code"
      example: "258"

    stockID:
      type: integer
      format: int32
      minimum: 1
      maximum: 2147483647
      description: "ID in the stock table. Required when updating an existing document."
      example: "100"

    StockLevel:
      type: number
      format: float
      description: "Inventory level"

    StorageCost:
      type: number
      format: float
      description: "Cost of storage"

    SuF:
      type: number
      format: float
      description: "Total NIS amount (credit or debit)"
      example: "1234.56"

    SuFDlr:
      type: number
      format: float
      description: "Total amount in foreign currency"
      example: "20.00"

    SumDiscount:
      type: number
      format: float 
      description: "The discount amount"

    TaxFileNum:
      type:  string
      maximum: 20
      description: "VAT registration number"

    Tftal:
      type: number
      format: float
      description: "Total amount"
      example: "2100"

    TFtalDiscount:
      type: number
      format: float
      description: "% customer discount"

    TransCredID:
      type: string
      maximum: 15
      description: "Main credit account key"
      example: "40001"

    TransDebID:
      type: string
      maximum: 15
      description: "Main debit account key"
      example: "777"

    TransType:
      type: string
      maximum: 3
      description: "Transaction type code"
      example: "חל"

    ValueDate:
      type: string #maybe can validate here: mm/dd/yyyy
      description: "Date"
      example: "30/01/2018"

    VatExampt:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "VAT exempt"

    VatFreeSalesAcc:
      type: string
      maximum: 15
      description: "VAT exempt sales account (existing account)"

    Volume:
      type: number
      format: float
      description: "Volume"

    Warehouse:
      type: integer
      format: int32
      description: "Warehouse"
      example: "1"

    WebSite:
      type: string
      maximum: 250
      description: "Web site"

    Weigt:
      type: number
      format: float
      description: "Weight"

    WieghtItem:
      type: string
      maximum: 1
      enum:
        - "0"
        - "1"
      description: "Weightable item (1- positive)"

    WorF:
      type: string
      maximum: 15
      description: "Occupation"

    Zip:
      type: string
      maximum: 10
      description: "Zip code"
      

    tmpJurnalBatchBody:
      type: object
      required:
        - insertolastb
        - batchNo
        - check
        - issue
        - rows
      properties:
        insertolastb:
          type: boolean
          default: true
          description: "Insert the transactions to the last open temporary batch. If false, open a new batch. True overrides batchNo."
        batchNo:
          allOf:
            - $ref: "#/components/schemas/batchNo"
            - description: "Insert the transactions to the temporary batch having this number. If no such temporary batch exists, open a new batch."
        check:
          type: boolean
          default: true
          description: "check the batch for errors and return the batch status"
        issue:
          type: boolean
          default: false
          description: "input the temporary batch into the permanent storage."
        rows:
          type: object
          #TODO define the object and create schema
    
    importIndexRecordshBody:
      type: object
      required:
        - myindex
        - insertnew
        - rows
      properties:
        myindex:
          type: string
          description: "acc- for accounts, itm- for items"
          enum:
            - "acc"
            - "itm"
        insertnew:
          type: boolean
          default: true
          description: "Allow inserting new records. If false only update is allowed"
        rows:
          type: object
          #TODO define the object and create schema
  
    createDocumentBody:
      type: object
      required:
        - issueStock
        - deleteTemp
        - rows
      properties:
        issueStock:
          type: boolean
          description: "issue the document"
        deleteTemp:
          type: boolean
          description: "if errors found, delete document or not"
        rows:
          type: object
          #TODO define the object and create schema
          
    exportDataRecordsBody:
      type: object
      required:
        - myDBname
        - datafile
      properties:
        myDBname:
          $ref: "#/components/parameters/company"
        datafile:
          type: object
          #TODO define the object and create schema      

  securitySchemes:
    wizAuth:
      type: http
      scheme: bearer
      bearerFormat: string

  # responses:
